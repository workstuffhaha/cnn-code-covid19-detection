import streamlit as st
import pickle
import numpy as np

# Load model and scaler
with open("Models/diabetes_model.pkl", "rb") as model_file:
    model = pickle.load(model_file)

with open("Models/diabetes_scaler.pkl", "rb") as scaler_file:
    scaler = pickle.load(scaler_file)

# Streamlit UI
st.title("Diabetes Prediction")
st.write("Answer the following questions to assess diabetes risk.")

# Define questions (Ensure feature count matches model training)
questions = [
    {"text": "Enter Number of Pregnancies:", "type": "number", "key": "pregnancies", "min": 0, "max": 20, "step": 1},
    {"text": "Enter Glucose Level:", "type": "number", "key": "glucose", "min": 0, "max": 200, "step": 1},
    {"text": "Enter Skin Thickness:", "type": "number", "key": "skin_thickness", "min": 0, "max": 150, "step": 1},
    {"text": "Enter Insulin Level:", "type": "number", "key": "insulin", "min": 0, "max": 1000, "step": 1},
    {"text": "Enter BMI:", "type": "number", "key": "bmi", "min": 0.0, "max": 100.0, "step": 0.1},
    {"text": "Enter Diabetes Pedigree Function:", "type": "number", "key": "dpf", "min": 0.0, "max": 3.0, "step": 0.01},
    {"text": "Enter Age:", "type": "number", "key": "age", "min": 0, "max": 100, "step": 1}
]

# Initialize session state
if "responses" not in st.session_state:
    st.session_state.responses = {}

# Collect user input
for q in questions:
    st.session_state.responses[q["key"]] = st.number_input(
        q["text"], min_value=q["min"], max_value=q["max"], step=q["step"], key=q["key"]
    )

# Prediction button
if st.button("Predict"):
    try:
        # Extract responses and convert to NumPy array
        user_input = np.array([
            st.session_state.responses["pregnancies"],
            st.session_state.responses["glucose"],
            st.session_state.responses["skin_thickness"],
            st.session_state.responses["insulin"],
            st.session_state.responses["bmi"],
            st.session_state.responses["dpf"],
            st.session_state.responses["age"]
        ]).reshape(1, -1)

        # Standardize input
        transformed_input = scaler.transform(user_input)

        # Predict
        prediction = model.predict(transformed_input)

        # Display result
        result = "Yes, you might have diabetes." if prediction[0] == 1 else "No, you do not have diabetes."
        st.success(result)

    except Exception as e:
        st.error(f"An error occurred: {e}")

# Restart Button
if st.button("Restart Test"):
    st.session_state.responses = {}
    st.rerun()
